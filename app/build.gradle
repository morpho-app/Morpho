plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "kotlin-android"
    id "kotlin-kapt"
    id "dagger.hilt.android.plugin"
    id "kotlin-parcelize"
    id("com.google.devtools.ksp")
    id("org.jetbrains.kotlin.plugin.serialization")
    id("org.jetbrains.kotlinx.binary-compatibility-validator")
    alias(libs.plugins.androidx.baselineprofile)
}

android {
    namespace "radiant.nimbus"
    compileSdk 34

    defaultConfig {
        applicationId "radiant.nimbus"
        minSdk 24
        //noinspection OldTargetApi
        targetSdk 33
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
        benchmark {
            initWith release
            signingConfig signingConfigs.debug
            matchingFallbacks = ["release"]
            debuggable false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "1.5.2"
    }
    packagingOptions {
        resources {
            //excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    implementation libs.profileinstaller
    implementation libs.androidx.material3.android
    baselineProfile project(":baselineprofile")
    def room_version = "2.5.2"



    implementation libs.slf4j.api
    implementation libs.slf4j.android

    implementation libs.androidx.core
    implementation libs.androidx.lifecycle.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform("androidx.compose:compose-bom:2023.09.01")
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-text-android"
    implementation "androidx.compose.ui:ui-graphics"
    implementation "androidx.compose.ui:ui-tooling-preview"
    implementation "androidx.compose.material3:material3"
    implementation "androidx.compose.material:material"

    implementation libs.androidx.window
    implementation "androidx.compose.material3:material3-window-size-class:1.1.2"

    implementation(libs.androidx.palette.ktx)
    implementation libs.androidx.datastore.core
    implementation libs.androidx.datastore.preferences.core
    implementation libs.androidx.material.icons.extended.v160alpha06
    implementation libs.androidx.paging.compose
    implementation libs.androidx.paging.runtime.ktx
    testImplementation libs.androidx.paging.common.ktx


    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform("androidx.compose:compose-bom:2023.09.01")
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    debugImplementation "androidx.compose.ui:ui-tooling"
    debugImplementation "androidx.compose.ui:ui-test-manifest"


    implementation libs.androidx.multidex

    implementation(libs.androidx.lifecycle.livedata.core.ktx)
    implementation(libs.androidx.lifecycle.lifecycle.viewmodel.compose)
    implementation(libs.androidx.lifecycle.runtime.compose)

    // Kotlin + coroutines
    implementation(libs.androidx.work.runtime.ktx)

    // optional - GCMNetworkManager support
    implementation(libs.androidx.work.gcm)

    // optional - Test helpers
    androidTestImplementation(libs.androidx.work.testing)

    // optional - Multiprocess support
    implementation libs.androidx.work.multiprocess

    // logging
    implementation(libs.ktor.logging)


    implementation(libs.kstore)
    implementation(libs.kstore.file)


    // Compose dependencies
    implementation libs.androidx.lifecycle.lifecycle.viewmodel.compose
    implementation libs.androidx.navigation.compose
    implementation libs.accompanist.flowlayout
    implementation libs.androidx.constraintlayout.compose

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation libs.kotlinx.coroutines.android

    // Coroutine Lifecycle Scopes
    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.lifecycle.lifecycle.runtime.ktx)

    //noinspection GradleDependency
    implementation(libs.guava)

    // To use CallbackToFutureAdapter
    implementation(libs.androidx.concurrent.futures)

    // Kotlin
    implementation(libs.kotlinx.coroutines.guava)
    implementation(libs.kotlin.reflect)

    //Dagger - Hilt
    implementation(libs.androidx.hilt.work)
    implementation(libs.hilt.android)
    kapt(libs.hilt.android.compiler)
    kapt(libs.androidx.hilt.compiler)
    implementation(libs.androidx.hilt.navigation.compose)
    implementation(libs.androidx.hilt.navigation.fragment)


    // Destinations library for easy navigation
    implementation(libs.animations.core)
    ksp(libs.ksp)

    // Coil
    implementation(libs.coil.compose)


    implementation(libs.ktor.cio)
    implementation(libs.androidx.security.crypto.ktx)
    implementation(libs.ktor.client.okhttp)

    implementation(libs.gson)
    implementation(libs.kotlinx.datetime)
    implementation(libs.kotlinx.immutable)
    implementation(libs.kotlinx.serialization.cbor)
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.ktor.contentnegotiation)
    implementation(libs.ktor.serialization.json)
    implementation(libs.ktor.websockets)

    //Markdown text
    implementation libs.compose.markdown

    implementation libs.androidx.room.runtime
    ksp("androidx.room:room-compiler:$room_version")
    implementation(libs.androidx.room.ktx)


    ksp("androidx.room:room-compiler:$room_version")

    implementation(libs.androidx.room.paging)




}
